@use "sass:math";

*,
*::before,
*::after {
  box-sizing: border-box;
}

//  Ensure that the body will always be rendered to the full height of the
//  viewport, even if the content is short enough that the body would not
//  ordinarily reach the bottom.
body {
  height: 100dvh;
  margin: 0;

  // Prevent iOS from changing font size when rotating the screen, or from
  // showing a highlight span in the default case
  -webkit-text-size-adjust: 100%;
  -webkit-tap-hightlight-color: rgba(black, 0);
}

.screen-only {
  @media not screen {
    display: none !important;
  }
}

body>header {
  border-bottom: $header-border solid var(--bell-blue);
  flex-shrink: 0;
  background-size: cover;
  background-repeat: no-repeat;
}

// Set the size ratio for the two major blocks.
main {
  flex: 4 1 24em;
  max-width: 48em;
}

aside#about {
  flex: 2 2 12em;
  max-width: 24em;
}

// Put vertical spacing inside `main` but *outside* `article`.
body:not(.embed) main {
  padding: 0.5em 0;
}

// Put horizontal spacing inside the least-common text container in both blocks.
// This is done because the scrollbar renders in the padding zone of a node
// containing text, and ignores padding zones imposed by ancestor
main>article,
#about-text {
  padding: 0 1em;
}

// These don’t need to be of uniform width, they just have to flow reasonably.
body>footer {
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-evenly;
  border-top: 2px solid var(--bell-ochre);
}

#about-logos {
  padding: 1em 0;

  img {
    height: 3em;
    display: initial;
  }

  p {
    margin: 0;
  }
}

// For small screens, center the infobar and put a horizontal divider between it
// and the main content.
@media screen and ((max-height: 39.9em) or (max-width: 37.9em)) {
  #content {
    display: flex;
    flex-flow: column wrap;
    align-items: center;

    &>* {
      max-width: 100%;
    }
  }

  main {
    border-block-end: 2px solid var(--bell-blue);
  }

  aside#about {
    padding-top: 0.5em;
  }
}

// Only flex the header/content/footer stack when the viewport is large enough
// to have the `<aside>` and `<main>` blocks in two columns. On smaller
// viewports, leave it as a plain vertical stack.
@media screen and (min-width: 38em) {

  // Put vertical boundaries around the content blocks.
  main {
    border-inline-start: 2px solid var(--bell-blue);
    border-inline-end: 2px solid var(--bell-blue);
  }

  aside#about {
    border-inline-start: 2px solid var(--bell-ochre);
    border-inline-end: 2px solid var(--bell-ochre);
  }

  @media (min-height: 40em) {
    body {
      display: flex;
      flex-flow: column nowrap;
      // Prevent the body from going below the viewport.
      max-height: 100dvh;
      overflow-y: clip;
    }

    body>header {
      min-height: math.div($avi-height, 2);
      max-height: $header-height;
    }

    #content {
      // Take all, but *only*, the unclaimed space in `<body>` not used by
      // `<header>` or `<footer>`.
      min-height: 0;

      // This is itself a flex container for `<main>` and `<aside #about>`.
      display: flex;
      // `<aside>` comes after `<main>` in markup, but before it in flow.
      flex-direction: row-reverse;
      // This block fills `<body>` as much as possible
      flex-grow: 1;
      // Permit vertical stacking on narrow viewports.
      flex-wrap: wrap;
      // Shove both children to the center of the screen on wide viewports.
      justify-content: center;

      border-top: $header-border solid var(--bell-ochre);
      border-bottom: 2px solid var(--bell-blue);
    }

    // These blocks have fixed size and are never modified by the page flexing.
    body>header,
    body>footer {
      flex-grow: 0;
      flex-shrink: 0;
    }

    // The top-level containers need to be constrained to the height of
    // `<#content>`.
    main,
    aside#about {
      max-height: 100%;
    }

    main {
      margin-inline-start: 0.125em;
    }

    aside#about {
      margin-inline-end: 0.125em;
    }

    // Shunt the logo upwards by the `<aside> top-margin and then half its
    // height. The horizon of the logo is now even with the boundary between
    // `<header>` and `<#content>`.
    #page-logo {
      position: relative;
      top: -#{math.div($avi-height, 2)};

      a {
        margin: 0;
        padding: 0;
      }
    }

    // The *text* containers need to scroll on overflow.
    main,
    #about-text {
      overflow-y: scroll;
    }

    // And the infobar needs to exclude the logo’s half-height.
    #about-text {
      max-height: calc(100% - math.div($avi-height, 2));
      // Margins are *outside* borders, this needs to account for the
      // border width.
      // max-height: 100%;
      // margin-top: calc(4px - math.div($avi-height, 2));
      // padding-top: calc(math.div($avi-height, 2) - 4px);
      position: relative;
      top: calc(4px - math.div($avi-height, 2));

      &>aside {
        border-bottom: 2px solid var(--bell-blue);
        margin-bottom: 0.5em;
      }
    }
  }
}

//  Centers and clamps YouTube embeds to look reasonable.
.youtube {
  // Center it in the container and provide a lower margin.
  margin: 0 auto 1em;
  // Fill the entire container
  width: 100%;
  aspect-ratio: 16 / 9;

  position: relative;

  iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

mjx-container {
  // display: inline-block;
  // max-width: 100%;
  overflow-x: scroll;
}
